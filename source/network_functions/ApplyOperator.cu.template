#include "network_functions/ApplyOperator.hpp"
#include "quantum_states.hpp"
#include "ensembles.hpp"


namespace ann_on_gpu {


template<typename Psi_t, typename Ensemble>
Array<complex_t> apply_operator(Psi_t& psi, const Operator_t& op, Ensemble& ensemble) {
    Array<complex_t> result(ensemble.get_num_steps(), psi.gpu);

    auto psi_kernel = psi.kernel();
    auto op_kernel = op.kernel();
    auto result_ptr = result.data();

    ensemble.foreach(
        psi,
        [=] __device__ __host__ (
            const unsigned int index,
            const typename Ensemble::Basis_t& configuration,
            const typename Psi_t::dtype log_psi,
            typename Psi_t::Payload& payload,
            const typename Psi_t::real_dtype weight
        ) {
            #include "cuda_kernel_defines.h"

            SHARED complex_t local_energy;
            op_kernel.local_energy(local_energy, psi_kernel, configuration, log_psi, payload);

            SINGLE {
                generic_atomicAdd(
                    &result_ptr[index],
                    weight * local_energy
                );
            }
        }
    );

    result.update_host();
    return result;
}


//! begin template
template Array<complex_t> apply_operator(AllPsi&, const Operator_t&, Ensemble<Basis>&);
//! end template


} // namespace ann_on_gpu
