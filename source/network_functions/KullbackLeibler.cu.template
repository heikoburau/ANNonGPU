#ifndef LEAN_AND_MEAN

#include "network_functions/KullbackLeibler.hpp"
#include "ensembles.hpp"
#include "quantum_states.hpp"

#include <cstring>
#include <math.h>


namespace ann_on_gpu {

namespace kernel {


template<bool compute_gradient, typename Psi_t, typename PsiPrime_t, typename Ensemble>
void kernel::KullbackLeibler::compute_averages(
    Psi_t& psi, PsiPrime_t& psi_prime, Ensemble& ensemble, double threshold
) const {
    const auto this_ = *this;
    const auto psi_kernel = psi.kernel();
    const auto psi_prime_kernel = psi_prime.kernel();
    const auto threshold2 = threshold * threshold;

    ensemble.foreach(
        psi_prime,
        [=] __device__ __host__ (
            const unsigned int spin_index,
            const typename Ensemble::Basis_t& configuration,
            const complex_t& log_psi_prime,
            typename PsiPrime_t::Payload& payload_prime,
            const double& weight
        ) {
            #include "cuda_kernel_defines.h"

            SHARED typename Psi_t::dtype    log_psi;
            SHARED typename Psi_t::Payload  payload;
            SHARED double                   prob_ratio;
            SHARED complex_t                deviation;
            SHARED double                   deviation2;

            psi_kernel.init_payload(payload, configuration);
            psi_kernel.log_psi_s(log_psi, configuration, payload);

            SINGLE {
                deviation = log_psi_prime - log_psi;
                deviation.__im_ = remainder(deviation.imag(), 6.283185307179586);

                prob_ratio = exp(-2.0 * deviation.real());
                deviation2 = abs2(deviation);
                if(deviation2 > threshold2) {
                    generic_atomicAdd(this_.deviation, weight * prob_ratio * deviation);
                    generic_atomicAdd(this_.deviation_abs2, weight * prob_ratio * deviation2);
                }
                generic_atomicAdd(this_.prob_ratio, weight * prob_ratio);
            }
            SYNC;

            if(compute_gradient) {
                psi_prime_kernel.foreach_O_k(
                    configuration,
                    payload_prime,
                    [&](const unsigned int k, const complex_t& O_k_element) {
                        generic_atomicAdd(
                            &this_.O_k[k],
                            weight * prob_ratio * conj(O_k_element)
                        );
                        if(deviation2 > threshold2) {
                            generic_atomicAdd(
                                &this_.deviation_O_k[k],
                                weight * prob_ratio * deviation * conj(O_k_element)
                            );
                        }
                    }
                );
            }
        },
        max(psi.get_width(), psi_prime.get_width())
    );
}

} // namespace kernel

KullbackLeibler::KullbackLeibler(const unsigned int num_params, const bool gpu)
      : num_params(num_params),
        deviation(1, gpu),
        deviation_abs2(1, gpu),
        O_k(num_params, gpu),
        deviation_O_k(num_params, gpu),
        prob_ratio(1, gpu)
    {
    this->gpu = gpu;

    this->kernel().deviation = this->deviation.data();
    this->kernel().deviation_abs2 = this->deviation_abs2.data();
    this->kernel().O_k = this->O_k.data();
    this->kernel().deviation_O_k = this->deviation_O_k.data();
    this->kernel().prob_ratio = this->prob_ratio.data();
}


void KullbackLeibler::clear() {
    this->deviation.clear();
    this->deviation_abs2.clear();
    this->O_k.clear();
    this->deviation_O_k.clear();
    this->prob_ratio.clear();
}


template<typename Psi_t, typename PsiPrime_t, typename Ensemble>
double KullbackLeibler::value(
    Psi_t& psi, PsiPrime_t& psi_prime, Ensemble& ensemble, double threshold
) {
    this->clear();
    this->compute_averages<false>(psi, psi_prime, ensemble, threshold);

    this->deviation.update_host();
    this->deviation_abs2.update_host();
    this->prob_ratio.update_host();

    this->deviation.front() /= this->prob_ratio.front();
    this->deviation_abs2.front() /= this->prob_ratio.front();

    return sqrt(max(
        1e-8,
        this->deviation_abs2.front() - abs2(this->deviation.front())
    ));

    // return this->deviation_abs2.front() - abs2(this->deviation.front());
}


template<typename Psi_t, typename PsiPrime_t, typename Ensemble>
double KullbackLeibler::gradient(
    complex<double>* result, Psi_t& psi, PsiPrime_t& psi_prime, Ensemble& ensemble, const double nu, double threshold
) {
    this->clear();
    this->compute_averages<true>(psi, psi_prime, ensemble, threshold);

    this->deviation.update_host();
    this->deviation_abs2.update_host();
    this->O_k.update_host();
    this->deviation_O_k.update_host();
    this->prob_ratio.update_host();

    this->deviation.front() /= this->prob_ratio.front();
    this->deviation_abs2.front() /= this->prob_ratio.front();
    for(auto k = 0u; k < this->num_params; k++) {
        this->O_k[k] /= this->prob_ratio.front();
        this->deviation_O_k[k] /= this->prob_ratio.front();
    }


    const auto value = sqrt(max(
        1e-8,
        this->deviation_abs2.front() - abs2(this->deviation.front())
    ));
    const auto factor = pow(value, nu);

    for(auto k = 0u; k < this->num_params; k++) {
        result[k] = (
            this->deviation_O_k[k] - this->deviation.front() * this->O_k[k]
        ).to_std() / factor;
    }

    return value;
}


//! begin template
template double KullbackLeibler::value(ClPsi&, PsiDeep&, Ensemble<Basis>&, double);
template double KullbackLeibler::gradient(complex<double>*, ClPsi&, PsiDeep&, Ensemble<Basis>&, const double, double);
//! end template


} // namespace ann_on_gpu

#endif // LEAN_AND_MEAN
